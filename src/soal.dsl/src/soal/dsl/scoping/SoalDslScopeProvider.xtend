/*
 * generated by Xtext 2.24.0
 */
package soal.dsl.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.resource.EObjectDescription
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.SimpleScope
import soal.model.Interface
import soal.model.NamedType
import soal.model.SoalModel
import soal.model.SoalModelPackage
import soal.model.StructType

/**
 * This class contains custom scoping description.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class SoalDslScopeProvider extends AbstractSoalDslScopeProvider {

    override getScope(EObject object, EReference ref) {
        val model = EcoreUtil2.getContainerOfType(object, typeof(SoalModel))
        if (model === null || ref == SoalModelPackage.Literals.SOAL_MODEL__IMPORTS) {
            return IScope.NULLSCOPE
        }

        val rootModel = model.rootModel
        if (ref == SoalModelPackage.Literals.SIMPLE_TYPE_REFERENCE__REFERENCED_TYPE ||
            ref == SoalModelPackage.Literals.REFERENCE_ARRAY_TYPE__INNER_TYPE ||
            ref == SoalModelPackage.Literals.NULLABLE_TYPE__INNER_TYPE ||
            ref == SoalModelPackage.Literals.TYPED_ELEMENT__TYPE_REFERENCE) {
            var candidates = newArrayList
            for (o : rootModel.declarations.filter(NamedType).filter[it.name !== null]) {
                candidates.add(EObjectDescription.create(QualifiedName.create(o.name), o))
            }
            return new SimpleScope(Scopes.scopeFor(model.globals.builtInTypes), candidates)
        }
        if (ref == SoalModelPackage.Literals.STRUCT_TYPE__BASE_TYPE || ref == SoalModelPackage.Literals.RESOURCE__ENTITY ||
            ref == SoalModelPackage.Literals.RESOURCE__EXCEPTIONS || ref == SoalModelPackage.Literals.OPERATION__EXCEPTIONS) {
            var candidates = newArrayList
            for (o : rootModel.declarations.filter(StructType).filter[it.name !== null]) {
                candidates.add(EObjectDescription.create(QualifiedName.create(o.name), o))
            }
            return new SimpleScope(candidates)
        }
        if (ref == SoalModelPackage.Literals.SERVICE__INTERFACE) {
            var candidates = newArrayList
            for (o : rootModel.declarations.filter(Interface).filter[it.name !== null]) {
                candidates.add(EObjectDescription.create(QualifiedName.create(o.name), o))
            }
            return new SimpleScope(candidates)
        }

        println("unhandled scope case: " + object + " " + ref.containerClass.name + "." + ref.name)
        return IScope.NULLSCOPE
    }

}
