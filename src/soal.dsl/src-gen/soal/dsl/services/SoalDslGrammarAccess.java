/*
 * generated by Xtext 2.31.0
 */
package soal.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SoalDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SoalModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.SoalModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cImportKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cImportsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cImportsSoalModelCrossReference_3_1_0 = (CrossReference)cImportsAssignment_3_1.eContents().get(0);
		private final RuleCall cImportsSoalModelSTRINGTerminalRuleCall_3_1_0_1 = (RuleCall)cImportsSoalModelCrossReference_3_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_4_0 = (RuleCall)cDeclarationsAssignment_4.eContents().get(0);
		
		//SoalModel:
		//    'description' name=ID';' ('import' imports+=[SoalModel|STRING]';')* declarations+=Declaration*;
		@Override public ParserRule getRule() { return rule; }
		
		//'description' name=ID';' ('import' imports+=[SoalModel|STRING]';')* declarations+=Declaration*
		public Group getGroup() { return cGroup; }
		
		//'description'
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//('import' imports+=[SoalModel|STRING]';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//'import'
		public Keyword getImportKeyword_3_0() { return cImportKeyword_3_0; }
		
		//imports+=[SoalModel|STRING]
		public Assignment getImportsAssignment_3_1() { return cImportsAssignment_3_1; }
		
		//[SoalModel|STRING]
		public CrossReference getImportsSoalModelCrossReference_3_1_0() { return cImportsSoalModelCrossReference_3_1_0; }
		
		//STRING
		public RuleCall getImportsSoalModelSTRINGTerminalRuleCall_3_1_0_1() { return cImportsSoalModelSTRINGTerminalRuleCall_3_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_4() { return cDeclarationsAssignment_4; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_4_0() { return cDeclarationsDeclarationParserRuleCall_4_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterfaceDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cServiceDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Declaration:
		//    EnumDeclaration | StructDeclaration | InterfaceDeclaration | ServiceDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//EnumDeclaration | StructDeclaration | InterfaceDeclaration | ServiceDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EnumDeclaration
		public RuleCall getEnumDeclarationParserRuleCall_0() { return cEnumDeclarationParserRuleCall_0; }
		
		//StructDeclaration
		public RuleCall getStructDeclarationParserRuleCall_1() { return cStructDeclarationParserRuleCall_1; }
		
		//InterfaceDeclaration
		public RuleCall getInterfaceDeclarationParserRuleCall_2() { return cInterfaceDeclarationParserRuleCall_2; }
		
		//ServiceDeclaration
		public RuleCall getServiceDeclarationParserRuleCall_3() { return cServiceDeclarationParserRuleCall_3; }
	}
	public class EnumDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.EnumDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cLiteralsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLiteralsEnumLiteralParserRuleCall_3_0_0 = (RuleCall)cLiteralsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cLiteralsEnumLiteralParserRuleCall_3_1_1_0 = (RuleCall)cLiteralsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EnumDeclaration returns EnumType:
		//    'enum' name=ID '{' (literals+=EnumLiteral (',' literals+=EnumLiteral)*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' name=ID '{' (literals+=EnumLiteral (',' literals+=EnumLiteral)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(literals+=EnumLiteral (',' literals+=EnumLiteral)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//literals+=EnumLiteral
		public Assignment getLiteralsAssignment_3_0() { return cLiteralsAssignment_3_0; }
		
		//EnumLiteral
		public RuleCall getLiteralsEnumLiteralParserRuleCall_3_0_0() { return cLiteralsEnumLiteralParserRuleCall_3_0_0; }
		
		//(',' literals+=EnumLiteral)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//literals+=EnumLiteral
		public Assignment getLiteralsAssignment_3_1_1() { return cLiteralsAssignment_3_1_1; }
		
		//EnumLiteral
		public RuleCall getLiteralsEnumLiteralParserRuleCall_3_1_1_0() { return cLiteralsEnumLiteralParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EnumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.EnumLiteral");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumLiteral:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class StructDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.StructDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBaseTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cBaseTypeStructTypeCrossReference_2_1_0 = (CrossReference)cBaseTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cBaseTypeStructTypeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cBaseTypeStructTypeCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFieldsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFieldsFieldDeclarationParserRuleCall_4_0 = (RuleCall)cFieldsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StructDeclaration returns StructType:
		//    'struct' name=ID (':' baseType=[StructType])? '{' fields+=FieldDeclaration* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'struct' name=ID (':' baseType=[StructType])? '{' fields+=FieldDeclaration* '}'
		public Group getGroup() { return cGroup; }
		
		//'struct'
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' baseType=[StructType])?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//baseType=[StructType]
		public Assignment getBaseTypeAssignment_2_1() { return cBaseTypeAssignment_2_1; }
		
		//[StructType]
		public CrossReference getBaseTypeStructTypeCrossReference_2_1_0() { return cBaseTypeStructTypeCrossReference_2_1_0; }
		
		//ID
		public RuleCall getBaseTypeStructTypeIDTerminalRuleCall_2_1_0_1() { return cBaseTypeStructTypeIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//fields+=FieldDeclaration*
		public Assignment getFieldsAssignment_4() { return cFieldsAssignment_4; }
		
		//FieldDeclaration
		public RuleCall getFieldsFieldDeclarationParserRuleCall_4_0() { return cFieldsFieldDeclarationParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.FieldDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeReferenceTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeReferenceAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FieldDeclaration returns Property:
		//    typeReference=TypeReference name=ID ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//typeReference=TypeReference name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//typeReference=TypeReference
		public Assignment getTypeReferenceAssignment_0() { return cTypeReferenceAssignment_0; }
		
		//TypeReference
		public RuleCall getTypeReferenceTypeReferenceParserRuleCall_0_0() { return cTypeReferenceTypeReferenceParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class InterfaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.InterfaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cResourcesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResourcesResourceDeclarationParserRuleCall_3_0 = (RuleCall)cResourcesAssignment_3.eContents().get(0);
		private final Assignment cOperationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperationsOperationDeclarationParserRuleCall_4_0 = (RuleCall)cOperationsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//InterfaceDeclaration returns Interface:
		//    'interface' name=ID '{' resources+=ResourceDeclaration* operations+=OperationDeclaration* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'interface' name=ID '{' resources+=ResourceDeclaration* operations+=OperationDeclaration* '}'
		public Group getGroup() { return cGroup; }
		
		//'interface'
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//resources+=ResourceDeclaration*
		public Assignment getResourcesAssignment_3() { return cResourcesAssignment_3; }
		
		//ResourceDeclaration
		public RuleCall getResourcesResourceDeclarationParserRuleCall_3_0() { return cResourcesResourceDeclarationParserRuleCall_3_0; }
		
		//operations+=OperationDeclaration*
		public Assignment getOperationsAssignment_4() { return cOperationsAssignment_4; }
		
		//OperationDeclaration
		public RuleCall getOperationsOperationDeclarationParserRuleCall_4_0() { return cOperationsOperationDeclarationParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ResourceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.ResourceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReadonlyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cReadonlyReadonlyKeyword_0_0 = (Keyword)cReadonlyAssignment_0.eContents().get(0);
		private final Keyword cResourceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEntityStructTypeCrossReference_2_0 = (CrossReference)cEntityAssignment_2.eContents().get(0);
		private final RuleCall cEntityStructTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cEntityStructTypeCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cThrowsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExceptionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cExceptionsStructTypeCrossReference_3_1_0 = (CrossReference)cExceptionsAssignment_3_1.eContents().get(0);
		private final RuleCall cExceptionsStructTypeIDTerminalRuleCall_3_1_0_1 = (RuleCall)cExceptionsStructTypeCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cExceptionsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cExceptionsStructTypeCrossReference_3_2_1_0 = (CrossReference)cExceptionsAssignment_3_2_1.eContents().get(0);
		private final RuleCall cExceptionsStructTypeIDTerminalRuleCall_3_2_1_0_1 = (RuleCall)cExceptionsStructTypeCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ResourceDeclaration returns Resource:
		//    readonly?='readonly'? 'resource' entity=[StructType] ('throws' exceptions+=[StructType] (',' exceptions+=[StructType])*)? ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//readonly?='readonly'? 'resource' entity=[StructType] ('throws' exceptions+=[StructType] (',' exceptions+=[StructType])*)? ';'
		public Group getGroup() { return cGroup; }
		
		//readonly?='readonly'?
		public Assignment getReadonlyAssignment_0() { return cReadonlyAssignment_0; }
		
		//'readonly'
		public Keyword getReadonlyReadonlyKeyword_0_0() { return cReadonlyReadonlyKeyword_0_0; }
		
		//'resource'
		public Keyword getResourceKeyword_1() { return cResourceKeyword_1; }
		
		//entity=[StructType]
		public Assignment getEntityAssignment_2() { return cEntityAssignment_2; }
		
		//[StructType]
		public CrossReference getEntityStructTypeCrossReference_2_0() { return cEntityStructTypeCrossReference_2_0; }
		
		//ID
		public RuleCall getEntityStructTypeIDTerminalRuleCall_2_0_1() { return cEntityStructTypeIDTerminalRuleCall_2_0_1; }
		
		//('throws' exceptions+=[StructType] (',' exceptions+=[StructType])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'throws'
		public Keyword getThrowsKeyword_3_0() { return cThrowsKeyword_3_0; }
		
		//exceptions+=[StructType]
		public Assignment getExceptionsAssignment_3_1() { return cExceptionsAssignment_3_1; }
		
		//[StructType]
		public CrossReference getExceptionsStructTypeCrossReference_3_1_0() { return cExceptionsStructTypeCrossReference_3_1_0; }
		
		//ID
		public RuleCall getExceptionsStructTypeIDTerminalRuleCall_3_1_0_1() { return cExceptionsStructTypeIDTerminalRuleCall_3_1_0_1; }
		
		//(',' exceptions+=[StructType])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//exceptions+=[StructType]
		public Assignment getExceptionsAssignment_3_2_1() { return cExceptionsAssignment_3_2_1; }
		
		//[StructType]
		public CrossReference getExceptionsStructTypeCrossReference_3_2_1_0() { return cExceptionsStructTypeCrossReference_3_2_1_0; }
		
		//ID
		public RuleCall getExceptionsStructTypeIDTerminalRuleCall_3_2_1_0_1() { return cExceptionsStructTypeIDTerminalRuleCall_3_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class OperationDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.OperationDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAsyncAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAsyncAsyncKeyword_0_0 = (Keyword)cAsyncAssignment_0.eContents().get(0);
		private final Assignment cResponseParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResponseParametersOutputParameterListParserRuleCall_1_0 = (RuleCall)cResponseParametersAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cRequestParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRequestParametersInputParameterListParserRuleCall_3_0 = (RuleCall)cRequestParametersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cThrowsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExceptionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cExceptionsStructTypeCrossReference_4_1_0 = (CrossReference)cExceptionsAssignment_4_1.eContents().get(0);
		private final RuleCall cExceptionsStructTypeIDTerminalRuleCall_4_1_0_1 = (RuleCall)cExceptionsStructTypeCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cExceptionsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cExceptionsStructTypeCrossReference_4_2_1_0 = (CrossReference)cExceptionsAssignment_4_2_1.eContents().get(0);
		private final RuleCall cExceptionsStructTypeIDTerminalRuleCall_4_2_1_0_1 = (RuleCall)cExceptionsStructTypeCrossReference_4_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OperationDeclaration returns Operation:
		//    async?='async'? responseParameters=OutputParameterList name=ID requestParameters=InputParameterList ('throws' exceptions+=[StructType] (',' exceptions+=[StructType])*)? ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//async?='async'? responseParameters=OutputParameterList name=ID requestParameters=InputParameterList ('throws' exceptions+=[StructType] (',' exceptions+=[StructType])*)? ';'
		public Group getGroup() { return cGroup; }
		
		//async?='async'?
		public Assignment getAsyncAssignment_0() { return cAsyncAssignment_0; }
		
		//'async'
		public Keyword getAsyncAsyncKeyword_0_0() { return cAsyncAsyncKeyword_0_0; }
		
		//responseParameters=OutputParameterList
		public Assignment getResponseParametersAssignment_1() { return cResponseParametersAssignment_1; }
		
		//OutputParameterList
		public RuleCall getResponseParametersOutputParameterListParserRuleCall_1_0() { return cResponseParametersOutputParameterListParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//requestParameters=InputParameterList
		public Assignment getRequestParametersAssignment_3() { return cRequestParametersAssignment_3; }
		
		//InputParameterList
		public RuleCall getRequestParametersInputParameterListParserRuleCall_3_0() { return cRequestParametersInputParameterListParserRuleCall_3_0; }
		
		//('throws' exceptions+=[StructType] (',' exceptions+=[StructType])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'throws'
		public Keyword getThrowsKeyword_4_0() { return cThrowsKeyword_4_0; }
		
		//exceptions+=[StructType]
		public Assignment getExceptionsAssignment_4_1() { return cExceptionsAssignment_4_1; }
		
		//[StructType]
		public CrossReference getExceptionsStructTypeCrossReference_4_1_0() { return cExceptionsStructTypeCrossReference_4_1_0; }
		
		//ID
		public RuleCall getExceptionsStructTypeIDTerminalRuleCall_4_1_0_1() { return cExceptionsStructTypeIDTerminalRuleCall_4_1_0_1; }
		
		//(',' exceptions+=[StructType])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//exceptions+=[StructType]
		public Assignment getExceptionsAssignment_4_2_1() { return cExceptionsAssignment_4_2_1; }
		
		//[StructType]
		public CrossReference getExceptionsStructTypeCrossReference_4_2_1_0() { return cExceptionsStructTypeCrossReference_4_2_1_0; }
		
		//ID
		public RuleCall getExceptionsStructTypeIDTerminalRuleCall_4_2_1_0_1() { return cExceptionsStructTypeIDTerminalRuleCall_4_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class InputParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.InputParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InputParameterList returns ParameterList:
		//    {ParameterList} '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterList} '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{ParameterList}
		public Action getParameterListAction_0() { return cParameterListAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_0_0() { return cParametersParameterParserRuleCall_2_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_1_0() { return cParametersParameterParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OutputParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.OutputParameterList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cParameterListAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cVoidKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cParameterListAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersSingleReturnParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//OutputParameterList returns ParameterList:
		//    {ParameterList} 'void' |
		//    {ParameterList} parameters+=SingleReturnParameter |
		//    '(' parameters+=Parameter (',' parameters+=Parameter)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterList} 'void' |
		//{ParameterList} parameters+=SingleReturnParameter |
		//'(' parameters+=Parameter (',' parameters+=Parameter)* ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ParameterList} 'void'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ParameterList}
		public Action getParameterListAction_0_0() { return cParameterListAction_0_0; }
		
		//'void'
		public Keyword getVoidKeyword_0_1() { return cVoidKeyword_0_1; }
		
		//{ParameterList} parameters+=SingleReturnParameter
		public Group getGroup_1() { return cGroup_1; }
		
		//{ParameterList}
		public Action getParameterListAction_1_0() { return cParameterListAction_1_0; }
		
		//parameters+=SingleReturnParameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//SingleReturnParameter
		public RuleCall getParametersSingleReturnParameterParserRuleCall_1_1_0() { return cParametersSingleReturnParameterParserRuleCall_1_1_0; }
		
		//'(' parameters+=Parameter (',' parameters+=Parameter)* ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_0() { return cParametersParameterParserRuleCall_2_1_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_2_1_0() { return cParametersParameterParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeReferenceTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeReferenceAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//    typeReference=TypeReference name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//typeReference=TypeReference name=ID
		public Group getGroup() { return cGroup; }
		
		//typeReference=TypeReference
		public Assignment getTypeReferenceAssignment_0() { return cTypeReferenceAssignment_0; }
		
		//TypeReference
		public RuleCall getTypeReferenceTypeReferenceParserRuleCall_0_0() { return cTypeReferenceTypeReferenceParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SingleReturnParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.SingleReturnParameter");
		private final Assignment cTypeReferenceAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeReferenceTypeReferenceParserRuleCall_0 = (RuleCall)cTypeReferenceAssignment.eContents().get(0);
		
		//SingleReturnParameter returns Parameter:
		//    typeReference=TypeReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//typeReference=TypeReference
		public Assignment getTypeReferenceAssignment() { return cTypeReferenceAssignment; }
		
		//TypeReference
		public RuleCall getTypeReferenceTypeReferenceParserRuleCall_0() { return cTypeReferenceTypeReferenceParserRuleCall_0; }
	}
	public class ServiceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.ServiceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInterfaceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInterfaceInterfaceCrossReference_3_0 = (CrossReference)cInterfaceAssignment_3.eContents().get(0);
		private final RuleCall cInterfaceInterfaceIDTerminalRuleCall_3_0_1 = (RuleCall)cInterfaceInterfaceCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cBindingKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBindingAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cBindingAlternatives_6_0 = (Alternatives)cBindingAssignment_6.eContents().get(0);
		private final RuleCall cBindingRestBindingKindEnumRuleCall_6_0_0 = (RuleCall)cBindingAlternatives_6_0.eContents().get(0);
		private final RuleCall cBindingSoapBindingKindEnumRuleCall_6_0_1 = (RuleCall)cBindingAlternatives_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ServiceDeclaration returns Service:
		//    'service' name=ID ':' interface=[Interface] '{' 'binding' binding=(RestBindingKind|SoapBindingKind) ';' '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'service' name=ID ':' interface=[Interface] '{' 'binding' binding=(RestBindingKind|SoapBindingKind) ';' '}'
		public Group getGroup() { return cGroup; }
		
		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//interface=[Interface]
		public Assignment getInterfaceAssignment_3() { return cInterfaceAssignment_3; }
		
		//[Interface]
		public CrossReference getInterfaceInterfaceCrossReference_3_0() { return cInterfaceInterfaceCrossReference_3_0; }
		
		//ID
		public RuleCall getInterfaceInterfaceIDTerminalRuleCall_3_0_1() { return cInterfaceInterfaceIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'binding'
		public Keyword getBindingKeyword_5() { return cBindingKeyword_5; }
		
		//binding=(RestBindingKind|SoapBindingKind)
		public Assignment getBindingAssignment_6() { return cBindingAssignment_6; }
		
		//(RestBindingKind|SoapBindingKind)
		public Alternatives getBindingAlternatives_6_0() { return cBindingAlternatives_6_0; }
		
		//RestBindingKind
		public RuleCall getBindingRestBindingKindEnumRuleCall_6_0_0() { return cBindingRestBindingKindEnumRuleCall_6_0_0; }
		
		//SoapBindingKind
		public RuleCall getBindingSoapBindingKindEnumRuleCall_6_0_1() { return cBindingSoapBindingKindEnumRuleCall_6_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.TypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArrayTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNullableTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSimpleTypeReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TypeReference:
		//    ArrayType | NullableType | SimpleTypeReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ArrayType | NullableType | SimpleTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArrayType
		public RuleCall getArrayTypeParserRuleCall_0() { return cArrayTypeParserRuleCall_0; }
		
		//NullableType
		public RuleCall getNullableTypeParserRuleCall_1() { return cNullableTypeParserRuleCall_1; }
		
		//SimpleTypeReference
		public RuleCall getSimpleTypeReferenceParserRuleCall_2() { return cSimpleTypeReferenceParserRuleCall_2; }
	}
	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.ArrayType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cReferenceArrayTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cInnerTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cInnerTypeTypeCrossReference_0_1_0 = (CrossReference)cInnerTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cInnerTypeTypeSimpleTypeNameParserRuleCall_0_1_0_1 = (RuleCall)cInnerTypeTypeCrossReference_0_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cContainmentArrayTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cInnerTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInnerTypeNullableTypeParserRuleCall_1_1_0 = (RuleCall)cInnerTypeAssignment_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ArrayType:
		//    {ReferenceArrayType} innerType=[Type|SimpleTypeName] '[' ']' |
		//    {ContainmentArrayType} innerType=NullableType '[' ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReferenceArrayType} innerType=[Type|SimpleTypeName] '[' ']' |
		//{ContainmentArrayType} innerType=NullableType '[' ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ReferenceArrayType} innerType=[Type|SimpleTypeName] '[' ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ReferenceArrayType}
		public Action getReferenceArrayTypeAction_0_0() { return cReferenceArrayTypeAction_0_0; }
		
		//innerType=[Type|SimpleTypeName]
		public Assignment getInnerTypeAssignment_0_1() { return cInnerTypeAssignment_0_1; }
		
		//[Type|SimpleTypeName]
		public CrossReference getInnerTypeTypeCrossReference_0_1_0() { return cInnerTypeTypeCrossReference_0_1_0; }
		
		//SimpleTypeName
		public RuleCall getInnerTypeTypeSimpleTypeNameParserRuleCall_0_1_0_1() { return cInnerTypeTypeSimpleTypeNameParserRuleCall_0_1_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_2() { return cLeftSquareBracketKeyword_0_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }
		
		//{ContainmentArrayType} innerType=NullableType '[' ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//{ContainmentArrayType}
		public Action getContainmentArrayTypeAction_1_0() { return cContainmentArrayTypeAction_1_0; }
		
		//innerType=NullableType
		public Assignment getInnerTypeAssignment_1_1() { return cInnerTypeAssignment_1_1; }
		
		//NullableType
		public RuleCall getInnerTypeNullableTypeParserRuleCall_1_1_0() { return cInnerTypeNullableTypeParserRuleCall_1_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2() { return cLeftSquareBracketKeyword_1_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class NullableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.NullableType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInnerTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInnerTypeTypeCrossReference_0_0 = (CrossReference)cInnerTypeAssignment_0.eContents().get(0);
		private final RuleCall cInnerTypeTypeSimpleTypeNameParserRuleCall_0_0_1 = (RuleCall)cInnerTypeTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullableType:
		//    innerType=[Type|SimpleTypeName] '?'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//innerType=[Type|SimpleTypeName] '?'
		public Group getGroup() { return cGroup; }
		
		//innerType=[Type|SimpleTypeName]
		public Assignment getInnerTypeAssignment_0() { return cInnerTypeAssignment_0; }
		
		//[Type|SimpleTypeName]
		public CrossReference getInnerTypeTypeCrossReference_0_0() { return cInnerTypeTypeCrossReference_0_0; }
		
		//SimpleTypeName
		public RuleCall getInnerTypeTypeSimpleTypeNameParserRuleCall_0_0_1() { return cInnerTypeTypeSimpleTypeNameParserRuleCall_0_0_1; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
	}
	public class SimpleTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.SimpleTypeReference");
		private final Assignment cReferencedTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferencedTypeTypeCrossReference_0 = (CrossReference)cReferencedTypeAssignment.eContents().get(0);
		private final RuleCall cReferencedTypeTypeSimpleTypeNameParserRuleCall_0_1 = (RuleCall)cReferencedTypeTypeCrossReference_0.eContents().get(1);
		
		//SimpleTypeReference:
		//    referencedType=[Type|SimpleTypeName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//referencedType=[Type|SimpleTypeName]
		public Assignment getReferencedTypeAssignment() { return cReferencedTypeAssignment; }
		
		//[Type|SimpleTypeName]
		public CrossReference getReferencedTypeTypeCrossReference_0() { return cReferencedTypeTypeCrossReference_0; }
		
		//SimpleTypeName
		public RuleCall getReferencedTypeTypeSimpleTypeNameParserRuleCall_0_1() { return cReferencedTypeTypeSimpleTypeNameParserRuleCall_0_1; }
	}
	public class SimpleTypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.SimpleTypeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBinaryKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBoolKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStringKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLongKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cFloatKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cDoubleKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cDateKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cTimeKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cDatetimeKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cDurationKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final RuleCall cQualifiedNameParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//SimpleTypeName returns ecore::EString:
		//    'object' | 'binary' | 'bool' | 'string' | 'int' | 'long' | 'float' | 'double' | 'date' | 'time' | 'datetime' | 'duration' | QualifiedName
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'object' | 'binary' | 'bool' | 'string' | 'int' | 'long' | 'float' | 'double' | 'date' | 'time' | 'datetime' | 'duration' | QualifiedName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'object'
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }
		
		//'binary'
		public Keyword getBinaryKeyword_1() { return cBinaryKeyword_1; }
		
		//'bool'
		public Keyword getBoolKeyword_2() { return cBoolKeyword_2; }
		
		//'string'
		public Keyword getStringKeyword_3() { return cStringKeyword_3; }
		
		//'int'
		public Keyword getIntKeyword_4() { return cIntKeyword_4; }
		
		//'long'
		public Keyword getLongKeyword_5() { return cLongKeyword_5; }
		
		//'float'
		public Keyword getFloatKeyword_6() { return cFloatKeyword_6; }
		
		//'double'
		public Keyword getDoubleKeyword_7() { return cDoubleKeyword_7; }
		
		//'date'
		public Keyword getDateKeyword_8() { return cDateKeyword_8; }
		
		//'time'
		public Keyword getTimeKeyword_9() { return cTimeKeyword_9; }
		
		//'datetime'
		public Keyword getDatetimeKeyword_10() { return cDatetimeKeyword_10; }
		
		//'duration'
		public Keyword getDurationKeyword_11() { return cDurationKeyword_11; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_12() { return cQualifiedNameParserRuleCall_12; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName returns ecore::EString : ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.EString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.EInt");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//     INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	public class RestBindingKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.RestBindingKind");
		private final EnumLiteralDeclaration cRESTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cRESTRESTKeyword_0 = (Keyword)cRESTEnumLiteralDeclaration.eContents().get(0);
		
		//enum RestBindingKind returns BindingKind:
		//    REST='REST'
		//;
		public EnumRule getRule() { return rule; }
		
		//REST='REST'
		public EnumLiteralDeclaration getRESTEnumLiteralDeclaration() { return cRESTEnumLiteralDeclaration; }
		
		//'REST'
		public Keyword getRESTRESTKeyword_0() { return cRESTRESTKeyword_0; }
	}
	public class SoapBindingKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "soal.dsl.SoalDsl.SoapBindingKind");
		private final EnumLiteralDeclaration cSOAPEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cSOAPSOAPKeyword_0 = (Keyword)cSOAPEnumLiteralDeclaration.eContents().get(0);
		
		//enum SoapBindingKind returns BindingKind:
		//    SOAP='SOAP'
		//;
		public EnumRule getRule() { return rule; }
		
		//SOAP='SOAP'
		public EnumLiteralDeclaration getSOAPEnumLiteralDeclaration() { return cSOAPEnumLiteralDeclaration; }
		
		//'SOAP'
		public Keyword getSOAPSOAPKeyword_0() { return cSOAPSOAPKeyword_0; }
	}
	
	private final SoalModelElements pSoalModel;
	private final DeclarationElements pDeclaration;
	private final EnumDeclarationElements pEnumDeclaration;
	private final EnumLiteralElements pEnumLiteral;
	private final StructDeclarationElements pStructDeclaration;
	private final FieldDeclarationElements pFieldDeclaration;
	private final InterfaceDeclarationElements pInterfaceDeclaration;
	private final ResourceDeclarationElements pResourceDeclaration;
	private final OperationDeclarationElements pOperationDeclaration;
	private final InputParameterListElements pInputParameterList;
	private final OutputParameterListElements pOutputParameterList;
	private final ParameterElements pParameter;
	private final SingleReturnParameterElements pSingleReturnParameter;
	private final ServiceDeclarationElements pServiceDeclaration;
	private final RestBindingKindElements eRestBindingKind;
	private final SoapBindingKindElements eSoapBindingKind;
	private final TypeReferenceElements pTypeReference;
	private final ArrayTypeElements pArrayType;
	private final NullableTypeElements pNullableType;
	private final SimpleTypeReferenceElements pSimpleTypeReference;
	private final SimpleTypeNameElements pSimpleTypeName;
	private final QualifiedNameElements pQualifiedName;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final EBooleanElements pEBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SoalDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSoalModel = new SoalModelElements();
		this.pDeclaration = new DeclarationElements();
		this.pEnumDeclaration = new EnumDeclarationElements();
		this.pEnumLiteral = new EnumLiteralElements();
		this.pStructDeclaration = new StructDeclarationElements();
		this.pFieldDeclaration = new FieldDeclarationElements();
		this.pInterfaceDeclaration = new InterfaceDeclarationElements();
		this.pResourceDeclaration = new ResourceDeclarationElements();
		this.pOperationDeclaration = new OperationDeclarationElements();
		this.pInputParameterList = new InputParameterListElements();
		this.pOutputParameterList = new OutputParameterListElements();
		this.pParameter = new ParameterElements();
		this.pSingleReturnParameter = new SingleReturnParameterElements();
		this.pServiceDeclaration = new ServiceDeclarationElements();
		this.eRestBindingKind = new RestBindingKindElements();
		this.eSoapBindingKind = new SoapBindingKindElements();
		this.pTypeReference = new TypeReferenceElements();
		this.pArrayType = new ArrayTypeElements();
		this.pNullableType = new NullableTypeElements();
		this.pSimpleTypeReference = new SimpleTypeReferenceElements();
		this.pSimpleTypeName = new SimpleTypeNameElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pEBoolean = new EBooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("soal.dsl.SoalDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SoalModel:
	//    'description' name=ID';' ('import' imports+=[SoalModel|STRING]';')* declarations+=Declaration*;
	public SoalModelElements getSoalModelAccess() {
		return pSoalModel;
	}
	
	public ParserRule getSoalModelRule() {
		return getSoalModelAccess().getRule();
	}
	
	//Declaration:
	//    EnumDeclaration | StructDeclaration | InterfaceDeclaration | ServiceDeclaration;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//EnumDeclaration returns EnumType:
	//    'enum' name=ID '{' (literals+=EnumLiteral (',' literals+=EnumLiteral)*)? '}'
	//;
	public EnumDeclarationElements getEnumDeclarationAccess() {
		return pEnumDeclaration;
	}
	
	public ParserRule getEnumDeclarationRule() {
		return getEnumDeclarationAccess().getRule();
	}
	
	//EnumLiteral:
	//    name=ID
	//;
	public EnumLiteralElements getEnumLiteralAccess() {
		return pEnumLiteral;
	}
	
	public ParserRule getEnumLiteralRule() {
		return getEnumLiteralAccess().getRule();
	}
	
	//StructDeclaration returns StructType:
	//    'struct' name=ID (':' baseType=[StructType])? '{' fields+=FieldDeclaration* '}'
	//;
	public StructDeclarationElements getStructDeclarationAccess() {
		return pStructDeclaration;
	}
	
	public ParserRule getStructDeclarationRule() {
		return getStructDeclarationAccess().getRule();
	}
	
	//FieldDeclaration returns Property:
	//    typeReference=TypeReference name=ID ';'
	//;
	public FieldDeclarationElements getFieldDeclarationAccess() {
		return pFieldDeclaration;
	}
	
	public ParserRule getFieldDeclarationRule() {
		return getFieldDeclarationAccess().getRule();
	}
	
	//InterfaceDeclaration returns Interface:
	//    'interface' name=ID '{' resources+=ResourceDeclaration* operations+=OperationDeclaration* '}'
	//;
	public InterfaceDeclarationElements getInterfaceDeclarationAccess() {
		return pInterfaceDeclaration;
	}
	
	public ParserRule getInterfaceDeclarationRule() {
		return getInterfaceDeclarationAccess().getRule();
	}
	
	//ResourceDeclaration returns Resource:
	//    readonly?='readonly'? 'resource' entity=[StructType] ('throws' exceptions+=[StructType] (',' exceptions+=[StructType])*)? ';'
	//;
	public ResourceDeclarationElements getResourceDeclarationAccess() {
		return pResourceDeclaration;
	}
	
	public ParserRule getResourceDeclarationRule() {
		return getResourceDeclarationAccess().getRule();
	}
	
	//OperationDeclaration returns Operation:
	//    async?='async'? responseParameters=OutputParameterList name=ID requestParameters=InputParameterList ('throws' exceptions+=[StructType] (',' exceptions+=[StructType])*)? ';'
	//;
	public OperationDeclarationElements getOperationDeclarationAccess() {
		return pOperationDeclaration;
	}
	
	public ParserRule getOperationDeclarationRule() {
		return getOperationDeclarationAccess().getRule();
	}
	
	//InputParameterList returns ParameterList:
	//    {ParameterList} '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
	//;
	public InputParameterListElements getInputParameterListAccess() {
		return pInputParameterList;
	}
	
	public ParserRule getInputParameterListRule() {
		return getInputParameterListAccess().getRule();
	}
	
	//OutputParameterList returns ParameterList:
	//    {ParameterList} 'void' |
	//    {ParameterList} parameters+=SingleReturnParameter |
	//    '(' parameters+=Parameter (',' parameters+=Parameter)* ')'
	//;
	public OutputParameterListElements getOutputParameterListAccess() {
		return pOutputParameterList;
	}
	
	public ParserRule getOutputParameterListRule() {
		return getOutputParameterListAccess().getRule();
	}
	
	//Parameter:
	//    typeReference=TypeReference name=ID
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//SingleReturnParameter returns Parameter:
	//    typeReference=TypeReference
	//;
	public SingleReturnParameterElements getSingleReturnParameterAccess() {
		return pSingleReturnParameter;
	}
	
	public ParserRule getSingleReturnParameterRule() {
		return getSingleReturnParameterAccess().getRule();
	}
	
	//ServiceDeclaration returns Service:
	//    'service' name=ID ':' interface=[Interface] '{' 'binding' binding=(RestBindingKind|SoapBindingKind) ';' '}'
	//;
	public ServiceDeclarationElements getServiceDeclarationAccess() {
		return pServiceDeclaration;
	}
	
	public ParserRule getServiceDeclarationRule() {
		return getServiceDeclarationAccess().getRule();
	}
	
	//enum RestBindingKind returns BindingKind:
	//    REST='REST'
	//;
	public RestBindingKindElements getRestBindingKindAccess() {
		return eRestBindingKind;
	}
	
	public EnumRule getRestBindingKindRule() {
		return getRestBindingKindAccess().getRule();
	}
	
	//enum SoapBindingKind returns BindingKind:
	//    SOAP='SOAP'
	//;
	public SoapBindingKindElements getSoapBindingKindAccess() {
		return eSoapBindingKind;
	}
	
	public EnumRule getSoapBindingKindRule() {
		return getSoapBindingKindAccess().getRule();
	}
	
	//TypeReference:
	//    ArrayType | NullableType | SimpleTypeReference
	//;
	public TypeReferenceElements getTypeReferenceAccess() {
		return pTypeReference;
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}
	
	//ArrayType:
	//    {ReferenceArrayType} innerType=[Type|SimpleTypeName] '[' ']' |
	//    {ContainmentArrayType} innerType=NullableType '[' ']'
	//;
	public ArrayTypeElements getArrayTypeAccess() {
		return pArrayType;
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}
	
	//NullableType:
	//    innerType=[Type|SimpleTypeName] '?'
	//;
	public NullableTypeElements getNullableTypeAccess() {
		return pNullableType;
	}
	
	public ParserRule getNullableTypeRule() {
		return getNullableTypeAccess().getRule();
	}
	
	//SimpleTypeReference:
	//    referencedType=[Type|SimpleTypeName]
	//;
	public SimpleTypeReferenceElements getSimpleTypeReferenceAccess() {
		return pSimpleTypeReference;
	}
	
	public ParserRule getSimpleTypeReferenceRule() {
		return getSimpleTypeReferenceAccess().getRule();
	}
	
	//SimpleTypeName returns ecore::EString:
	//    'object' | 'binary' | 'bool' | 'string' | 'int' | 'long' | 'float' | 'double' | 'date' | 'time' | 'datetime' | 'duration' | QualifiedName
	//;
	public SimpleTypeNameElements getSimpleTypeNameAccess() {
		return pSimpleTypeName;
	}
	
	public ParserRule getSimpleTypeNameRule() {
		return getSimpleTypeNameAccess().getRule();
	}
	
	//QualifiedName returns ecore::EString : ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//     INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
